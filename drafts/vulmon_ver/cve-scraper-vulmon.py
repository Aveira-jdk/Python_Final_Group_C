import os
import re
import json
import webbrowser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from docx import Document
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from fpdf import FPDF  # Import FPDF for PDF generation
import time  # Import time module for delay

# Set up Selenium WebDriver
driver = webdriver.Firefox()  # You might need to adjust this according to your system configuration

# Define the URL patterns for different websites
nvd_url_pattern = "https://nvd.nist.gov/vuln/detail/{cve_id}"
exploit_db_url_pattern = "https://www.exploit-db.com/search?cve={cve_id}"


# nvd scraper by Mahammad
def get_nvd_info(cve_id):
    url = nvd_url_pattern.format(cve_id=cve_id)
    driver.get(url)

    try:
        summary_element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//p[@data-testid='vuln-description']"))
        )
        summary = summary_element.text
    except:
        summary = "Summary is not available"

    try:
        cvss_score_element = driver.find_element(By.XPATH, "//a[@data-testid='vuln-cvss3-panel-score']")
        cvss_score = cvss_score_element.text
    except:
        cvss_score = "Base score is not available"

    try:
        vector_element = driver.find_element(By.XPATH, "//span[@data-testid='vuln-cvss3-nist-vector']")
        vector = vector_element.text
    except:
        vector = "Vector is not available"

    try:
        reference_element = driver.find_element(By.XPATH, "//td[@data-testid='vuln-hyperlinks-link-0']/a")
        reference = reference_element.get_attribute("href")
    except:
        reference = "Reference is not available"

    return summary, cvss_score, vector, reference


# exploit-db scraper by Ravan
def check_exploit_db(cve_id):
    # Set up Selenium Firefox driver
    driver = webdriver.Firefox()

    # Construct the URL based on the CVE ID
    url = f"https://www.exploit-db.com/search?cve={cve_id}"

    # Open the URL in the browser
    driver.get(url)

    # Wait for the page to load
    time.sleep(5)

    # Find the table containing the links
    table = driver.find_element(By.XPATH, '//*[@id="exploits-table"]')

    # Find all links in the table
    links = table.find_elements(By.TAG_NAME, 'a')

    # Extract and return the href attribute of each link
    return [link.get_attribute('href') for link in links]


# docx export by Aytan
def create_docx_report(cve_id, nvd_info, exploit_links):
    summary, cvss_score, vector, reference = nvd_info

    doc = Document()

    # Title
    title = doc.add_heading('CVE Report', level=1)
    title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # CVE Information
    cve_paragraph = doc.add_paragraph()
    cve_paragraph.add_run("CVE ID: ").bold = True
    cve_paragraph.add_run(f"{cve_id}\n\n")

    cve_paragraph.add_run("Summary: ").bold = True
    cve_paragraph.add_run(f"{summary}\n\n")

    cve_paragraph.add_run("Base Score: ").bold = True
    cve_paragraph.add_run(f"{cvss_score}\n\n")

    cve_paragraph.add_run("Vector: ").bold = True
    cve_paragraph.add_run(f"{vector}\n\n")

    cve_paragraph.add_run("Reference: ").bold = True
    cve_paragraph.add_run(f"{reference}\n\n")

    # Add spacing
    cve_paragraph.add_run("\n" * 2)

    # Exploit Information
    exploit_paragraph = doc.add_paragraph()

    download_exploits = [link for link in exploit_links if '/download/' in link]
    look_exploits = [link for link in exploit_links if '/download/' not in link]

    if download_exploits:
        exploit_paragraph.add_run("Exploit Links to Download:").bold = True
        exploit_paragraph.add_run("\n\n")
        for link in download_exploits:
            exploit_paragraph.add_run(f"{link}\n")

        exploit_paragraph.add_run("\n" * 2)

    if look_exploits:
        exploit_paragraph.add_run("Exploit Links to Look:").bold = True
        exploit_paragraph.add_run("\n\n")
        for link in look_exploits:
            exploit_paragraph.add_run(f"{link}\n")

    # Save the document
    folder_name = f"reports/{cve_id}"
    os.makedirs(folder_name, exist_ok=True)
    docx_filename = os.path.join(folder_name, f"report_{cve_id}.docx")
    doc.save(docx_filename)

    return docx_filename


# json export by Nuray
def export_to_json(cve_id, nvd_info, exploit_links):
    summary, cvss_score, vector, reference = nvd_info

    download_exploits = [link for link in exploit_links if '/download/' in link]
    look_exploits = [link for link in exploit_links if '/download/' not in link]

    data = {
        "CVE_ID": cve_id,
        "NVD_Info": {
            "Summary": summary,
            "Base_Score": cvss_score,
            "Vector": vector,
            "Reference": reference
        },
        "Exploit_Links": {
            "Download_Exploits": download_exploits,
            "Look_Exploits": look_exploits
        }
    }
    folder_name = f"reports/{cve_id}"
    os.makedirs(folder_name, exist_ok=True)
    json_filename = os.path.join(folder_name, f"{cve_id}.json")
    with open(json_filename, "w") as json_file:
        json.dump(data, json_file, indent=4)
    return json_filename


# PDF export by [Your Name]
def export_to_pdf(cve_id, nvd_info, exploit_links):
    summary, cvss_score, vector, reference = nvd_info

    # Create PDF object
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)

    # Add a page
    pdf.add_page()

    # Set font for the entire document
    pdf.set_font("Arial", size=12)

    # Add title
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, f"CVE Report for {cve_id}", ln=True, align='C')
    pdf.cell(200, 10, txt="", ln=True)  # Add blank line

    # Add CVE Information section
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="CVE Information", ln=True)
    pdf.cell(200, 5, txt="", ln=True)  # Add smaller blank line

    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, txt="CVE ID: " + cve_id, align='L')
    pdf.multi_cell(0, 5, txt="Summary: " + summary, align='L')
    pdf.multi_cell(0, 10, txt="Base Score: " + cvss_score, align='L')
    pdf.multi_cell(0, 10, txt="Vector: " + vector, align='L')
    pdf.multi_cell(0, 5, txt="Reference: " + reference, align='L')

    # Add Exploit Information section
    pdf.cell(200, 10, txt="", ln=True)  # Add blank line
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Exploit Information", ln=True)
    pdf.cell(200, 5, txt="", ln=True)  # Add smaller blank line

    download_exploits = [link for link in exploit_links if '/download/' in link]
    look_exploits = [link for link in exploit_links if '/download/' not in link]

    if download_exploits:
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(0, 10, txt="Exploit Links to Download:", align='L')
        for link in download_exploits:
            pdf.multi_cell(0, 5, txt=link, align='L')

    if look_exploits:
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(0, 10, txt="Exploit Links to Look:", align='L')
        for link in look_exploits:
            pdf.multi_cell(0, 5, txt=link, align='L')

    # Save the PDF file
    folder_name = f"reports/{cve_id}"
    os.makedirs(folder_name, exist_ok=True)
    pdf_filename = os.path.join(folder_name, f"report_{cve_id}.pdf")
    pdf.output(pdf_filename)
    return pdf_filename

# Markdown export by [Your Name]
def export_to_markdown(cve_id, nvd_info, exploit_links):
    summary, cvss_score, vector, reference = nvd_info

    # Construct markdown content
    markdown_content = f"# CVE Report for {cve_id}\n\n"
    markdown_content += "## CVE Information\n"
    markdown_content += f"- **CVE ID:** {cve_id}\n"
    markdown_content += f"- **Summary:** {summary}\n"
    markdown_content += f"- **Base Score:** {cvss_score}\n"
    markdown_content += f"- **Vector:** {vector}\n"
    markdown_content += f"- **Reference:** [{reference}]({reference})\n\n"

    markdown_content += "## Exploit Information\n"
    download_exploits = [link for link in exploit_links if '/download/' in link]
    look_exploits = [link for link in exploit_links if '/download/' not in link]

    if download_exploits:
        markdown_content += "### Exploit Links to Download:\n"
        for link in download_exploits:
            markdown_content += f"- {link}\n"
        markdown_content += "\n"

    if look_exploits:
        markdown_content += "### Exploit Links to Look:\n"
        for link in look_exploits:
            markdown_content += f"- {link}\n"
        markdown_content += "\n"

    # Save the Markdown content to a file
    folder_name = f"reports/{cve_id}"
    os.makedirs(folder_name, exist_ok=True)
    markdown_filename = os.path.join(folder_name, f"report_{cve_id}.md")
    with open(markdown_filename, "w") as markdown_file:
        markdown_file.write(markdown_content)

    return markdown_filename


# tab opener by Aytan and Ravan
def open_references(cve_id):
    nvd_url = nvd_url_pattern.format(cve_id=cve_id)
    exploit_db_url = exploit_db_url_pattern.format(cve_id=cve_id)
    webbrowser.open_new_tab(nvd_url)
    webbrowser.open_new_tab(exploit_db_url)


# main function by Mahammad
def main():
    while True:
        print("[1]: Continue")
        print("[2]: Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            cve_id = input("Enter CVE ID: ").strip()
            cve_regex = r'^CVE-\d{4}-\d{4,}$'
            if re.match(cve_regex, cve_id):
                nvd_info = get_nvd_info(cve_id)
                exploit_links = check_exploit_db(cve_id)

                # Export to all three formats simultaneously
                docx_filename = create_docx_report(cve_id, nvd_info, exploit_links)
                json_filename = export_to_json(cve_id, nvd_info, exploit_links)
                pdf_filename = export_to_pdf(cve_id, nvd_info, exploit_links)
                markdown_filename = export_to_markdown(cve_id, nvd_info, exploit_links)

                # Print messages for each export
                print(f"DOCX report saved as: {docx_filename}")
                print(f"JSON data exported as: {json_filename}")
                print(f"PDF report saved as: {pdf_filename}")
                print(f"Markdown report saved as: {markdown_filename}")

                open_references(cve_id)
            else:
                print("Please enter a valid CVE ID (e.g., CVE-2017-0144)")
        elif choice == "2":
            break
        else:
            print("Invalid input. Please enter a valid choice (1 or 2).")

    driver.quit()


if __name__ == "__main__":
    main()
